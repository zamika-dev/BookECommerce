// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SampleStore.DataAccess;

#nullable disable

namespace SampleStore.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250731205137_addDiscountToBookAndChangedCartShoppingToCartItem")]
    partial class addDiscountToBookAndChangedCartShoppingToCartItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Desctiption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("WriterId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = new Guid("086eca5b-0bbe-4167-bd5a-933641b32a51"),
                            BookName = "هملت",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "hamlet.webp",
                            Price = 120000.0,
                            PublishDate = new DateTime(1603, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات امیرکبیر",
                            WriterId = new Guid("638e2599-4a2b-48d4-ba2e-806852b11a24")
                        },
                        new
                        {
                            Id = new Guid("d1f290ff-58cf-4e88-8b80-e106f11c4d5f"),
                            BookName = "غرور و تعصب",
                            CategoryId = new Guid("2c912630-85dc-466f-b96d-c1300fef34ff"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "pride_and_prejudice.webp",
                            Price = 95000.0,
                            PublishDate = new DateTime(1813, 1, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات خوارزمی",
                            WriterId = new Guid("4b18983f-c931-4b74-b675-0ccd82232b1d")
                        },
                        new
                        {
                            Id = new Guid("4688e9d5-b505-47e9-92e2-86bbeb06a2b7"),
                            BookName = "جنگ و صلح",
                            CategoryId = new Guid("b42b2855-c2b3-40a4-ae71-ef414b29c40c"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "war_and_peace.webp",
                            Price = 250000.0,
                            PublishDate = new DateTime(1869, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات نیلوفر",
                            WriterId = new Guid("a578f8b8-04a5-48cc-9f70-fdb4f9021205")
                        },
                        new
                        {
                            Id = new Guid("c93480ea-23b8-4cb1-a0f1-329a077422b5"),
                            BookName = "پیرمرد و دریا",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "old_man_and_sea.webp",
                            Price = 80000.0,
                            PublishDate = new DateTime(1952, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات علمی و فرهنگی",
                            WriterId = new Guid("56f356c8-74e5-4cac-94ff-c890fa4fb4bb")
                        },
                        new
                        {
                            Id = new Guid("22659c32-8c87-4cdb-80bf-fd19262f6f16"),
                            BookName = "خانم دالووی",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "mrs_dalloway.webp",
                            Price = 110000.0,
                            PublishDate = new DateTime(1925, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات مرکز",
                            WriterId = new Guid("bc74523b-6ed1-42d4-bbf6-f3cfc160778c")
                        },
                        new
                        {
                            Id = new Guid("0799a13e-77f5-4ede-833e-1629d0cf0e9f"),
                            BookName = "جنایت و مکافات",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "crime_and_punishment.webp",
                            Price = 135000.0,
                            PublishDate = new DateTime(1866, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات امیرکبیر",
                            WriterId = new Guid("7705327a-1886-49b4-9c03-cda1e1814093")
                        },
                        new
                        {
                            Id = new Guid("593c31d7-d00c-4b32-bd5e-90f333a4f3ad"),
                            BookName = "صد سال تنهایی",
                            CategoryId = new Guid("dfeaa92f-0b47-429c-a0cf-fbba9d9568f1"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 7, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "one_hundred_years.webp",
                            Price = 180000.0,
                            PublishDate = new DateTime(1967, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات نیلوفر",
                            WriterId = new Guid("656a25d8-8161-45b7-8961-7f68844dd133")
                        },
                        new
                        {
                            Id = new Guid("31589b83-9399-4edc-b3f3-a3b9871a9dbd"),
                            BookName = "الف",
                            CategoryId = new Guid("b005956b-d1c7-4064-aefc-dc67e21c08ec"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 8, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "aleph.webp",
                            Price = 75000.0,
                            PublishDate = new DateTime(1949, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات کارنامه",
                            WriterId = new Guid("f674c236-e3c4-40c4-a967-1510e7d5944c")
                        },
                        new
                        {
                            Id = new Guid("e5f08920-e2f8-4032-9647-1764b9fd34b9"),
                            BookName = "شازده کوچولو",
                            CategoryId = new Guid("dfeaa92f-0b47-429c-a0cf-fbba9d9568f1"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 9, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "little_prince.webp",
                            Price = 60000.0,
                            PublishDate = new DateTime(1943, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات پرتقال",
                            WriterId = new Guid("7b08c076-8fe9-4060-be80-7b13dcf73fe4")
                        },
                        new
                        {
                            Id = new Guid("2fa1c6c0-a5dd-485c-b943-c683848ed99d"),
                            BookName = "بوف کور",
                            CategoryId = new Guid("05203634-a0ca-48d7-9caf-d81b01265983"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "blind_owl.webp",
                            Price = 90000.0,
                            PublishDate = new DateTime(1937, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات جاویدان",
                            WriterId = new Guid("66642c35-20d9-46b1-8554-6605cec4e8ae")
                        },
                        new
                        {
                            Id = new Guid("57e6aaec-607f-43b5-8737-ddc2ceaf58c4"),
                            BookName = "مکبث",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "macbeth.webp",
                            Price = 85000.0,
                            PublishDate = new DateTime(1623, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات نی",
                            WriterId = new Guid("638e2599-4a2b-48d4-ba2e-806852b11a24")
                        },
                        new
                        {
                            Id = new Guid("4851ec98-e3fc-4d6b-8cbd-2df89e74c40e"),
                            BookName = "اما",
                            CategoryId = new Guid("2c912630-85dc-466f-b96d-c1300fef34ff"),
                            Condition = "",
                            CreatedDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "emma.webp",
                            Price = 105000.0,
                            PublishDate = new DateTime(1815, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات نگاه",
                            WriterId = new Guid("4b18983f-c931-4b74-b675-0ccd82232b1d")
                        },
                        new
                        {
                            Id = new Guid("dc7a27c9-bac7-45eb-a70c-490d856e2052"),
                            BookName = "آنا کارنینا",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "anna_karenina.webp",
                            Price = 220000.0,
                            PublishDate = new DateTime(1878, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات ماهی",
                            WriterId = new Guid("a578f8b8-04a5-48cc-9f70-fdb4f9021205")
                        },
                        new
                        {
                            Id = new Guid("1806db32-da8a-4dce-ba51-c5a0f8ea43eb"),
                            BookName = "زنگ‌ها برای که به صدا درمی‌آیند",
                            CategoryId = new Guid("b42b2855-c2b3-40a4-ae71-ef414b29c40c"),
                            Condition = "",
                            CreatedDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "for_whom_the_bell_tolls.webp",
                            Price = 125000.0,
                            PublishDate = new DateTime(1940, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات علمی و فرهنگی",
                            WriterId = new Guid("56f356c8-74e5-4cac-94ff-c890fa4fb4bb")
                        },
                        new
                        {
                            Id = new Guid("510b2a9d-4f14-4f19-a3ab-5da3199f2e96"),
                            BookName = "به سوی فانوس دریایی",
                            CategoryId = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            Condition = "",
                            CreatedDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Desctiption = "",
                            Discount = 0.0,
                            ImagePath = "to_the_lighthouse.webp",
                            Price = 98000.0,
                            PublishDate = new DateTime(1927, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PublisherName = "انتشارات مرکز",
                            WriterId = new Guid("bc74523b-6ed1-42d4-bbf6-f3cfc160778c")
                        });
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.CartItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BookId");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("708a1378-40da-4580-b31b-727a000d91a4"),
                            CategoryName = "رمان",
                            Description = "آثار داستانی بلند با طرح‌های پیچیده و شخصیت‌های توسعه یافته",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("b005956b-d1c7-4064-aefc-dc67e21c08ec"),
                            CategoryName = "داستان کوتاه",
                            Description = "مجموعه‌ای از داستان‌های کوتاه با موضوعات متنوع",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("493a46ae-c734-4408-b971-632939e06920"),
                            CategoryName = "علمی-تخیلی",
                            Description = "داستان‌هایی با زمینه علمی و فناوری‌های آینده‌نگرانه",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("dfeaa92f-0b47-429c-a0cf-fbba9d9568f1"),
                            CategoryName = "فانتزی",
                            Description = "آثار خیال‌انگیز با عناصر ماوراء طبیعی و جادویی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("b42b2855-c2b3-40a4-ae71-ef414b29c40c"),
                            CategoryName = "تاریخی",
                            Description = "رمان‌ها و آثار غیرداستانی با زمینه تاریخی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("2c912630-85dc-466f-b96d-c1300fef34ff"),
                            CategoryName = "عاشقانه",
                            Description = "داستان‌هایی با محوریت روابط عاشقانه",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("05203634-a0ca-48d7-9caf-d81b01265983"),
                            CategoryName = "ترسناک",
                            Description = "آثار با عناصر وحشت و فراطبیعی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("77321d37-4fb5-4d01-8769-d346eb2cdddb"),
                            CategoryName = "زندگینامه",
                            Description = "شرح زندگی افراد مشهور و تأثیرگذار",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("943df6d9-f44d-401a-90da-ca736276e148"),
                            CategoryName = "توسعه فردی",
                            Description = "کتاب‌های خودیاری و بهبود مهارت‌های شخصی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("640cb937-d344-4847-b5ef-a69b6200eb50"),
                            CategoryName = "فلسفه",
                            Description = "آثار مربوط به تفکر فلسفی و نظریه‌پردازی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("0ae0819e-5cac-41af-8c31-a5a6feb492d0"),
                            CategoryName = "روانشناسی",
                            Description = "کتاب‌های مربوط به ذهن و رفتار انسان",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("c8595e03-4f28-4262-b9ac-c5d36b84a464"),
                            CategoryName = "تکنولوژی",
                            Description = "آخرین پیشرفت‌های فناوری و علوم کامپیوتر",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("6b5d53cc-54fd-4b05-a1e7-7edc06969b9c"),
                            CategoryName = "هنر و طراحی",
                            Description = "کتاب‌های مربوط به هنرهای تجسمی و طراحی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("c34e7f91-e350-4365-b330-e92071db5c6e"),
                            CategoryName = "آشپزی",
                            Description = "دستورالعمل‌ها و تکنیک‌های آشپزی",
                            DisplayOrder = 0
                        },
                        new
                        {
                            Id = new Guid("3dcdcfa8-9c8b-479e-b356-14309924a9ca"),
                            CategoryName = "سفرنامه",
                            Description = "تجربیات و مشاهدات مسافران از مناطق مختلف",
                            DisplayOrder = 0
                        });
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1a1f64db-fb20-4949-9b45-e83a2b0a80d1"),
                            CityName = "تبریز",
                            ProvinceId = new Guid("da314798-ed14-4dcf-bcf1-b5cbed99b448")
                        },
                        new
                        {
                            Id = new Guid("6d469baa-bd59-4bd3-83f7-6d9d19fad7e0"),
                            CityName = "مراغه",
                            ProvinceId = new Guid("da314798-ed14-4dcf-bcf1-b5cbed99b448")
                        },
                        new
                        {
                            Id = new Guid("95105922-71a9-4a3e-b758-3582d0409f3b"),
                            CityName = "ارومیه",
                            ProvinceId = new Guid("bd562450-2efb-4f7d-a9cd-69f9f067e354")
                        },
                        new
                        {
                            Id = new Guid("27296f29-ff9c-43d7-8b5d-223c5123bddd"),
                            CityName = "خوی",
                            ProvinceId = new Guid("bd562450-2efb-4f7d-a9cd-69f9f067e354")
                        },
                        new
                        {
                            Id = new Guid("a8ddd736-09fd-490f-9dd3-d9b1b48aa0a2"),
                            CityName = "اردبیل",
                            ProvinceId = new Guid("d4f0fc62-9525-4a7d-9346-6474ddb77f81")
                        },
                        new
                        {
                            Id = new Guid("f30cc42f-ba13-43c9-a5ab-2d384ce4d805"),
                            CityName = "مشگین‌شهر",
                            ProvinceId = new Guid("d4f0fc62-9525-4a7d-9346-6474ddb77f81")
                        },
                        new
                        {
                            Id = new Guid("2fe54e24-41cf-4473-b23d-1889b779084a"),
                            CityName = "اصفهان",
                            ProvinceId = new Guid("6341f29d-4257-4123-9600-804747a46013")
                        },
                        new
                        {
                            Id = new Guid("4113fdeb-0cb6-4d7e-8b66-1225b1cbf65d"),
                            CityName = "کاشان",
                            ProvinceId = new Guid("6341f29d-4257-4123-9600-804747a46013")
                        },
                        new
                        {
                            Id = new Guid("38663209-9e46-4ac5-9865-513a6a551d3d"),
                            CityName = "کرج",
                            ProvinceId = new Guid("ddebb38b-f674-4091-a851-b76fc7fcbac7")
                        });
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Country");

                    b.HasData(
                        new
                        {
                            Id = new Guid("73f242f6-6d3f-4627-9faf-d953306c7047"),
                            CountryName = "بریتانیا"
                        },
                        new
                        {
                            Id = new Guid("44c6fcaf-45dd-482a-9cb9-67d0fe10f879"),
                            CountryName = "روسیه"
                        },
                        new
                        {
                            Id = new Guid("d22f7c41-90b1-4bca-9d73-0b34443b88e8"),
                            CountryName = "آمریکا"
                        },
                        new
                        {
                            Id = new Guid("c9b9a288-9bef-4af3-9e1d-4e5b5910c624"),
                            CountryName = "فرانسه"
                        },
                        new
                        {
                            Id = new Guid("4b998595-4b0d-4174-a1e8-094a5b07ccf2"),
                            CountryName = "آلمان"
                        },
                        new
                        {
                            Id = new Guid("43169c29-a4f7-4d20-8e5a-eba0f5cab4cd"),
                            CountryName = "ایتالیا"
                        },
                        new
                        {
                            Id = new Guid("397d6a56-a680-492b-9944-768ec09450f3"),
                            CountryName = "اسپانیا"
                        },
                        new
                        {
                            Id = new Guid("fb2c1707-4e8e-403c-b42f-c546d2b0ea81"),
                            CountryName = "چین"
                        },
                        new
                        {
                            Id = new Guid("1f4b8250-0363-45b9-b796-3f181f438752"),
                            CountryName = "ژاپن"
                        },
                        new
                        {
                            Id = new Guid("365908df-7a1f-45df-9a4a-1b741841c975"),
                            CountryName = "هند"
                        },
                        new
                        {
                            Id = new Guid("1ccab492-8384-4dfe-a4e5-985c6ff1c0c2"),
                            CountryName = "برزیل"
                        },
                        new
                        {
                            Id = new Guid("bf0dd6c3-d152-469f-b65a-a1517555ef8d"),
                            CountryName = "کانادا"
                        },
                        new
                        {
                            Id = new Guid("2643f2bf-d214-4f3c-a9ae-45ccca259704"),
                            CountryName = "استرالیا"
                        },
                        new
                        {
                            Id = new Guid("7c36d192-c3c6-443f-8d79-5440472637e1"),
                            CountryName = "مکزیک"
                        },
                        new
                        {
                            Id = new Guid("b4a5f671-15e2-4b4a-ae5d-d2f41b173ef3"),
                            CountryName = "کره جنوبی"
                        },
                        new
                        {
                            Id = new Guid("ed4937fa-d6da-4fc6-9266-16656f42f551"),
                            CountryName = "ترکیه"
                        },
                        new
                        {
                            Id = new Guid("afbbc95f-be11-4099-bbc1-182518004bee"),
                            CountryName = "ایران"
                        },
                        new
                        {
                            Id = new Guid("794cbc58-4d83-4875-9801-7a5b305c459a"),
                            CountryName = "مصر"
                        },
                        new
                        {
                            Id = new Guid("f7d69a0d-f64f-492c-99f1-a3bbd02e5d2b"),
                            CountryName = "آفریقای جنوبی"
                        },
                        new
                        {
                            Id = new Guid("449b5c41-b0f7-4cf8-af67-1098799400d7"),
                            CountryName = "آرژانتین"
                        });
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Province", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da314798-ed14-4dcf-bcf1-b5cbed99b448"),
                            ProvinceName = "آذربایجان شرقی"
                        },
                        new
                        {
                            Id = new Guid("bd562450-2efb-4f7d-a9cd-69f9f067e354"),
                            ProvinceName = "آذربایجان غربی"
                        },
                        new
                        {
                            Id = new Guid("d4f0fc62-9525-4a7d-9346-6474ddb77f81"),
                            ProvinceName = "اردبیل"
                        },
                        new
                        {
                            Id = new Guid("6341f29d-4257-4123-9600-804747a46013"),
                            ProvinceName = "اصفهان"
                        },
                        new
                        {
                            Id = new Guid("ddebb38b-f674-4091-a851-b76fc7fcbac7"),
                            ProvinceName = "البرز"
                        },
                        new
                        {
                            Id = new Guid("dd1d3b26-2b7f-4413-93b4-b77fe0748a0a"),
                            ProvinceName = "ایلام"
                        },
                        new
                        {
                            Id = new Guid("cff49c8d-547a-47fe-af95-1bd0919619cd"),
                            ProvinceName = "بوشهر"
                        },
                        new
                        {
                            Id = new Guid("fed5cade-3d06-47ea-915e-a37fce2f89ff"),
                            ProvinceName = "تهران"
                        },
                        new
                        {
                            Id = new Guid("ccfd7b22-07de-481c-b276-9a3ed302821e"),
                            ProvinceName = "چهارمحال و بختیاری"
                        },
                        new
                        {
                            Id = new Guid("d42125b1-3986-4785-9b04-b8213f0ddd85"),
                            ProvinceName = "خراسان جنوبی"
                        },
                        new
                        {
                            Id = new Guid("d6a54798-e29c-4566-891a-056e402192a8"),
                            ProvinceName = "خراسان رضوی"
                        },
                        new
                        {
                            Id = new Guid("78d9f126-979f-4613-a96d-01e0d33dfee3"),
                            ProvinceName = "خراسان شمالی"
                        },
                        new
                        {
                            Id = new Guid("9e9d2065-43e3-46bd-afba-3aa380a85cdb"),
                            ProvinceName = "خوزستان"
                        },
                        new
                        {
                            Id = new Guid("84b46230-3ba2-4e0f-b92d-ac18b527b8a6"),
                            ProvinceName = "زنجان"
                        },
                        new
                        {
                            Id = new Guid("3cec9d28-80fc-49cd-a611-bbad16f3972c"),
                            ProvinceName = "سمنان"
                        },
                        new
                        {
                            Id = new Guid("ae3dc98f-f6d2-4ff5-befa-446664595702"),
                            ProvinceName = "سیستان و بلوچستان"
                        },
                        new
                        {
                            Id = new Guid("2c513843-1a07-4c4d-8044-be58525823a7"),
                            ProvinceName = "فارس"
                        },
                        new
                        {
                            Id = new Guid("d6ad0016-816b-44e5-8f81-51b8f3f78537"),
                            ProvinceName = "قزوین"
                        },
                        new
                        {
                            Id = new Guid("bbae735f-69a0-4dfd-944f-bb76ab744103"),
                            ProvinceName = "قم"
                        },
                        new
                        {
                            Id = new Guid("fce7c129-a376-44f2-ae1d-b31068f52348"),
                            ProvinceName = "کردستان"
                        },
                        new
                        {
                            Id = new Guid("9106a46c-cfa1-45f9-bfed-4954ad369518"),
                            ProvinceName = "کرمان"
                        },
                        new
                        {
                            Id = new Guid("c6dcaf58-da0b-401f-a284-c0bd21a3f317"),
                            ProvinceName = "کرمانشاه"
                        },
                        new
                        {
                            Id = new Guid("b4427192-a119-4ef6-b66b-4b802020a572"),
                            ProvinceName = "کهگیلویه و بویراحمد"
                        },
                        new
                        {
                            Id = new Guid("d2ea55b7-452c-472e-b7c8-7b16cba758f2"),
                            ProvinceName = "گلستان"
                        },
                        new
                        {
                            Id = new Guid("f19764ee-925c-47fa-8fd6-387ff17952aa"),
                            ProvinceName = "گیلان"
                        },
                        new
                        {
                            Id = new Guid("e7d96627-f01d-47e0-b667-9bb0999e1eed"),
                            ProvinceName = "لرستان"
                        },
                        new
                        {
                            Id = new Guid("e4598fdf-270f-4139-a418-43d529a35b83"),
                            ProvinceName = "مازندران"
                        },
                        new
                        {
                            Id = new Guid("d286fedf-a647-4e01-b19f-e990be895cff"),
                            ProvinceName = "مرکزی"
                        },
                        new
                        {
                            Id = new Guid("49e5ecd9-335e-43d4-86ee-45d74a57412a"),
                            ProvinceName = "هرمزگان"
                        },
                        new
                        {
                            Id = new Guid("a4a522af-0cbc-46c0-8fd1-54dfe3439640"),
                            ProvinceName = "همدان"
                        },
                        new
                        {
                            Id = new Guid("89a7af45-e239-4408-984e-ce64c1073963"),
                            ProvinceName = "یزد"
                        });
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Writer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Writers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("638e2599-4a2b-48d4-ba2e-806852b11a24"),
                            CountryId = new Guid("73f242f6-6d3f-4627-9faf-d953306c7047"),
                            DateOfBirth = new DateTime(1564, 4, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "ویلیام",
                            Gender = "Male",
                            LastName = "شکسپیر"
                        },
                        new
                        {
                            Id = new Guid("4b18983f-c931-4b74-b675-0ccd82232b1d"),
                            CountryId = new Guid("73f242f6-6d3f-4627-9faf-d953306c7047"),
                            DateOfBirth = new DateTime(1775, 12, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "جین",
                            Gender = "Female",
                            LastName = "آستین"
                        },
                        new
                        {
                            Id = new Guid("a578f8b8-04a5-48cc-9f70-fdb4f9021205"),
                            CountryId = new Guid("44c6fcaf-45dd-482a-9cb9-67d0fe10f879"),
                            DateOfBirth = new DateTime(1828, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "لئو",
                            Gender = "Male",
                            LastName = "تولستوی"
                        },
                        new
                        {
                            Id = new Guid("56f356c8-74e5-4cac-94ff-c890fa4fb4bb"),
                            CountryId = new Guid("d22f7c41-90b1-4bca-9d73-0b34443b88e8"),
                            DateOfBirth = new DateTime(1899, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "ارنست",
                            Gender = "Male",
                            LastName = "همینگوی"
                        },
                        new
                        {
                            Id = new Guid("bc74523b-6ed1-42d4-bbf6-f3cfc160778c"),
                            CountryId = new Guid("73f242f6-6d3f-4627-9faf-d953306c7047"),
                            DateOfBirth = new DateTime(1882, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "ویرجینیا",
                            Gender = "Female",
                            LastName = "وولف"
                        },
                        new
                        {
                            Id = new Guid("7705327a-1886-49b4-9c03-cda1e1814093"),
                            CountryId = new Guid("44c6fcaf-45dd-482a-9cb9-67d0fe10f879"),
                            DateOfBirth = new DateTime(1821, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "فئودور",
                            Gender = "Male",
                            LastName = "داستایوفسکی"
                        },
                        new
                        {
                            Id = new Guid("656a25d8-8161-45b7-8961-7f68844dd133"),
                            CountryId = new Guid("1ccab492-8384-4dfe-a4e5-985c6ff1c0c2"),
                            DateOfBirth = new DateTime(1927, 3, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "گابریل",
                            Gender = "Male",
                            LastName = "گارسیا مارکز"
                        },
                        new
                        {
                            Id = new Guid("f674c236-e3c4-40c4-a967-1510e7d5944c"),
                            CountryId = new Guid("449b5c41-b0f7-4cf8-af67-1098799400d7"),
                            DateOfBirth = new DateTime(1899, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "خورخه",
                            Gender = "Male",
                            LastName = "لوئیس بورخس"
                        },
                        new
                        {
                            Id = new Guid("7b08c076-8fe9-4060-be80-7b13dcf73fe4"),
                            CountryId = new Guid("c9b9a288-9bef-4af3-9e1d-4e5b5910c624"),
                            DateOfBirth = new DateTime(1900, 6, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "آنتوان",
                            Gender = "Male",
                            LastName = "دو سنت اگزوپری"
                        },
                        new
                        {
                            Id = new Guid("66642c35-20d9-46b1-8554-6605cec4e8ae"),
                            CountryId = new Guid("afbbc95f-be11-4099-bbc1-182518004bee"),
                            DateOfBirth = new DateTime(1903, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "صادق",
                            Gender = "Male",
                            LastName = "هدایت"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Book", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleStore.Domain.Entities.Writer", "Writer")
                        .WithMany()
                        .HasForeignKey("WriterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Writer");
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SampleStore.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.City", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("SampleStore.Domain.Entities.Writer", b =>
                {
                    b.HasOne("SampleStore.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });
#pragma warning restore 612, 618
        }
    }
}
